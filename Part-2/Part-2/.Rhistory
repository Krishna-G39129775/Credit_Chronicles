# Identifying categorical variables except 'Attrition_Flag'
categorical_vars <- sapply(credit_card_data, is.character)
categorical_vars["Attrition_Flag"] <- FALSE  # Exclude 'Attrition_Flag' from one-hot encoding
# Check data types
str(credit_card_data)
# Check categorical variables
print(categorical_vars)
# One-hot encoding the categorical variables
credit_card_data_encoded <- credit_card_data %>%
select(which(categorical_vars)) %>%
mutate_if(is.character, as.factor) %>%
model.matrix(~ ., data = .)
# Converting the response variable to a factor (if not already)
response_var <- as.factor(response_var)
# Adding 'Attrition_Flag' back to the encoded data
credit_card_data_encoded <- data.frame(Attrition_Flag = response_var, credit_card_data_encoded)
# Viewing the first few rows of the encoded data
head(credit_card_data_encoded, -5)
library(tidyverse)
library(caret)
library(pROC)
library(dplyr)
library(scales)
# Load the dataset
credit_card_data <- read.csv('/Users/saikrishnapaila/Downloads/Data_science/Intro_DATA_SCIENCE/Github_HW/credit_card.csv')
# Drop the specified columns ("CLIENTNUM" and the last two Naive Bayes Classifier columns)
credit_card_data <- credit_card_data %>%
select(-CLIENTNUM,
-Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1,
-Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2)
# Identify numeric columns, excluding "CLIENTNUM"
numeric_columns <- sapply(credit_card_data, is.numeric)
numeric_columns["CLIENTNUM"] <- FALSE  # Exclude CLIENTNUM
# Normalize the numeric columns
credit_card_data[numeric_columns] <- lapply(credit_card_data[numeric_columns], rescale, to = c(0, 1))
# View the first few rows of the normalized data
head(credit_card_data, 5)
llibrary(dplyr)
library(dplyr)
library(dplyr)
library(caret)
# Keeping 'Attrition_Flag' separate before one-hot encoding
response_var <- credit_card_data$Attrition_Flag
# Identifying categorical variables except 'Attrition_Flag'
categorical_vars <- sapply(credit_card_data, is.character)
categorical_vars["Attrition_Flag"] <- FALSE  # Exclude 'Attrition_Flag' from one-hot encoding
# Check data types
str(credit_card_data)
# Check categorical variables
print(categorical_vars)
# One-hot encoding the categorical variables
credit_card_data_encoded <- credit_card_data %>%
select(which(categorical_vars)) %>%
mutate_if(is.character, as.factor)
# Using model.matrix with '-1' to exclude intercept
credit_card_data_encoded <- model.matrix(~ . - 1, data = credit_card_data_encoded)
# Converting the response variable to a factor (if not already)
response_var <- as.factor(response_var)
# Adding 'Attrition_Flag' back to the encoded data
credit_card_data_encoded <- data.frame(Attrition_Flag = response_var, credit_card_data_encoded)
# Viewing the first few rows of the encoded data
head(credit_card_data_encoded, 5)
library(dplyr)
library(caret)
# Keeping 'Attrition_Flag' separate before one-hot encoding
response_var <- credit_card_data$Attrition_Flag
# Identifying categorical variables except 'Attrition_Flag'
categorical_vars <- sapply(credit_card_data, is.character)
categorical_vars["Attrition_Flag"] <- FALSE  # Exclude 'Attrition_Flag' from one-hot encoding
# Check data types
str(credit_card_data)
# Check categorical variables
print(categorical_vars)
# One-hot encoding the categorical variables
credit_card_data_encoded <- credit_card_data %>%
select(which(categorical_vars)) %>%
mutate_if(is.character, as.factor)
# Using model.matrix with '-1' to exclude intercept
credit_card_data_encoded <- model.matrix(~ . - 1, data = credit_card_data_encoded)
# Converting the response variable to a factor (if not already)
response_var <- as.factor(response_var)
# Adding 'Attrition_Flag' back to the encoded data
credit_card_data_encoded <- data.frame(Attrition_Flag = response_var, credit_card_data_encoded)
# Assuming 'Attrition_Flag' is a factor column in credit_card_data_encoded
credit_card_data_encoded$Attrition_Flag <- as.numeric(credit_card_data_encoded$Attrition_Flag == "Existing Customer")
# Viewing the first few rows of the modified data
head(credit_card_data_encoded, 5)
library(dplyr)
library(caret)
# Keeping 'Attrition_Flag' separate before one-hot encoding
response_var <- credit_card_data$Attrition_Flag
# Identifying categorical variables except 'Attrition_Flag'
categorical_vars <- sapply(credit_card_data, is.character)
categorical_vars["Attrition_Flag"] <- FALSE  # Exclude 'Attrition_Flag' from one-hot encoding
# Check data types
str(credit_card_data)
# Check categorical variables
print(categorical_vars)
# One-hot encoding the categorical variables
credit_card_data_encoded <- credit_card_data %>%
select(which(categorical_vars)) %>%
mutate_if(is.character, as.factor)
# Using model.matrix with '-1' to exclude intercept
credit_card_data_encoded <- model.matrix(~ . - 1, data = credit_card_data_encoded)
# Converting the response variable to a factor (if not already)
response_var <- as.factor(response_var)
# Adding 'Attrition_Flag' back to the encoded data
credit_card_data_encoded <- data.frame(Attrition_Flag = response_var, credit_card_data_encoded)
# Assuming 'Attrition_Flag' is a factor column in credit_card_data_encoded
credit_card_data_encoded$Attrition_Flag <- as.numeric(credit_card_data_encoded$Attrition_Flag == "Existing Customer")
# Viewing the first few rows of the modified data
head(credit_card_data_encoded, 5)
str(credit_card_data_encoded)
library(dplyr)
# Remove duplicate 'Attrition_Flag' column
credit_card_data_encoded <- credit_card_data_encoded %>%
select(-Attrition_Flag)  # Replace 'Attrition_Flag1' with the correct name if different
# Convert numeric columns to factors
credit_card_data_encoded <- credit_card_data_encoded %>%
mutate_if(is.numeric, as.factor)
# Check the structure again
str(credit_card_data_encoded)
library(dplyr)
# Remove duplicate 'Attrition_Flag' column
credit_card_data_encoded <- credit_card_data_encoded # Replace 'Attrition_Flag1' with the correct name if different
# Convert numeric columns to factors
credit_card_data_encoded <- credit_card_data_encoded %>%
mutate_if(is.numeric, as.factor)
# Check the structure again
str(credit_card_data_encoded)
library(dplyr)
# Remove duplicate 'Attrition_Flag' column
credit_card_data_encoded <- credit_card_data_encoded # Replace 'Attrition_Flag1' with the correct name if different
# Convert numeric columns to factors
credit_card_data_encoded <- credit_card_data_encoded %>%
mutate_if(is.numeric, as.factor)
# Check the structure again
str(credit_card_data_encoded)
library(tidyverse)
library(caret)
library(pROC)
library(dplyr)
library(scales)
# Load the dataset
credit_card_data <- read.csv('/Users/saikrishnapaila/Downloads/Data_science/Intro_DATA_SCIENCE/Github_HW/credit_card.csv')
# Drop the specified columns ("CLIENTNUM" and the last two Naive Bayes Classifier columns)
credit_card_data <- credit_card_data %>%
select(-CLIENTNUM,
-Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1,
-Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2)
# Identify numeric columns, excluding "CLIENTNUM"
numeric_columns <- sapply(credit_card_data, is.numeric)
numeric_columns["CLIENTNUM"] <- FALSE  # Exclude CLIENTNUM
# Normalize the numeric columns
credit_card_data[numeric_columns] <- lapply(credit_card_data[numeric_columns], rescale, to = c(0, 1))
# View the first few rows of the normalized data
head(credit_card_data, 5)
library(dplyr)
library(caret)
# Keeping 'Attrition_Flag' separate before one-hot encoding
response_var <- credit_card_data$Attrition_Flag
# Identifying categorical variables except 'Attrition_Flag'
categorical_vars <- sapply(credit_card_data, is.character)
categorical_vars["Attrition_Flag"] <- FALSE  # Exclude 'Attrition_Flag' from one-hot encoding
# Check data types
str(credit_card_data)
# Check categorical variables
print(categorical_vars)
# One-hot encoding the categorical variables
credit_card_data_encoded <- credit_card_data %>%
select(which(categorical_vars)) %>%
mutate_if(is.character, as.factor)
# Using model.matrix with '-1' to exclude intercept
credit_card_data_encoded <- model.matrix(~ . - 1, data = credit_card_data_encoded)
# Converting the response variable to a factor (if not already)
response_var <- as.factor(response_var)
# Adding 'Attrition_Flag' back to the encoded data
credit_card_data_encoded <- data.frame(Attrition_Flag = response_var, credit_card_data_encoded)
# Assuming 'Attrition_Flag' is a factor column in credit_card_data_encoded
credit_card_data_encoded$Attrition_Flag <- as.numeric(credit_card_data_encoded$Attrition_Flag == "Existing Customer")
# Viewing the first few rows of the modified data
head(credit_card_data_encoded, 5)
str(credit_card_data_encoded)
library(dplyr)
# Remove duplicate 'Attrition_Flag' column
# Replace 'Attrition_Flag1' with the correct name if different
# Convert numeric columns to factors
credit_card_data_encoded <- credit_card_data_encoded %>%
mutate_if(is.numeric, as.factor)
# Check the structure again
str(credit_card_data_encoded)
library(car)
# Assuming credit_card_data_encoded is your dataframe and it's properly prepared
# Ensure that you have a linear model created from this dataframe. For example:
lm_model <- lm(YourResponseVariable ~ ., data = credit_card_data_encoded)
library(car)
# Assuming credit_card_data_encoded is your dataframe and it's properly prepared
# Ensure that you have a linear model created from this dataframe. For example:
lm_model <- lm(Attrition_Flag ~ ., data = credit_card_data_encoded)
# Calculate VIF
vif_values <- vif(lm_model)
# Load reticulate package
library(reticulate)
# Assuming X_1, num_cols, and y are already defined in R
X_2 <- X_1
library(caret)
library(nnet)
library(rpart)
library(randomForest)
library(gbm)
library(e1071)
library(pROC)
# Load the data
data <- read.csv('credit_card.csv')
# Drop specific columns
data$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 <- NULL
data$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 <- NULL
# Install the package if it's not already installed
if (!require(caTools)) {
install.packages("caTools")
}
# Load the package
library(caTools)
# Now you can use the sample.split function
split <- sample.split(data$Attrition_Flag, SplitRatio = 0.8)
train_df <- subset(data, split == TRUE)
test_df  <- subset(data, split == FALSE)
# Now, you can separate the predictors (X) from the target (y)
X_train <- train_df[, -which(names(train_df) %in% "Attrition_Flag")]
y_train <- train_df$Attrition_Flag
X_test <- test_df[, -which(names(test_df) %in% "Attrition_Flag")]
y_test <- test_df$Attrition_Flag
# Create a copy of the dataframes
X_test_copy <- X_test
y_test_copy <- y_test
head(X_test)
colnames(train_df)
# Select predictors (X) excluding 'CLIENTNUM' and 'Attrition_Flag'
X <- train_df[, !(names(train_df) %in% c('CLIENTNUM', 'Attrition_Flag'))]
# Select target variable (y)
y <- train_df$Attrition_Flag
# Install and load the necessary package
if (!require(caret)) {
install.packages("caret")
library(caret)
}
# Create a copy of the dataframe
X_1 <- X
# Define the columns to one-hot encode
cols_to_encode <- c('Gender', 'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category')
# Perform one-hot encoding and drop the original columns
for (i in cols_to_encode) {
# Create dummy variables
formula <- paste(i, "~ . - 1")
tempdf <- model.matrix(as.formula(formula), data=X_1)
colnames(tempdf) <- paste(i, colnames(tempdf), sep="_")  # Add prefix to the column names
# Concatenate the dummy variables with the original dataframe
X_1 <- cbind(X_1, tempdf)
# Drop the original column
X_1 <- X_1[, !names(X_1) %in% i]
}
# Print the first few rows of the modified dataframe
head(X_1)
library(psych)
describe(X_1)
# Create a copy of the dataframe
X_2 <- X_1
# Define the numeric columns to be scaled
num_cols <- c('Customer_Age', 'Dependent_count', 'Months_on_book',
'Total_Relationship_Count', 'Months_Inactive_12_mon',
'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal',
'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1')
# Perform feature scaling
X_2[num_cols] <- scale(X_2[num_cols])
# Print the modified dataframe
print(X_2)
# Load reticulate package
library(reticulate)
# Assuming X_1, num_cols, and y are already defined in R
X_2 <- X_1
# Assuming num_cols is a list of numerical column names
sc_scale <- import('sklearn.preprocessing', convert = TRUE)$StandardScaler()
vif_df <- function(X) {
vif <- data.frame(
Feature = colnames(X),
VIF_Factor = sapply(1:ncol(X), function(i) reticulate::py_run_string(sprintf("from statsmodels.stats.outliers_influence import variance_inflation_factor\nvariance_inflation_factor(X, %s)", i)))
)
return(vif)
}
vif <- vif_df(X_2[, num_cols])
library(caret)
library(nnet)
library(rpart)
library(randomForest)
library(gbm)
library(e1071)
library(pROC)
# Load the data
data <- read.csv('credit_card.csv')
# Drop specific columns
data$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 <- NULL
data$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 <- NULL
# Install the package if it's not already installed
if (!require(caTools)) {
install.packages("caTools")
}
# Load the package
library(caTools)
# Now you can use the sample.split function
split <- sample.split(data$Attrition_Flag, SplitRatio = 0.8)
train_df <- subset(data, split == TRUE)
test_df  <- subset(data, split == FALSE)
# Now, you can separate the predictors (X) from the target (y)
X_train <- train_df[, -which(names(train_df) %in% "Attrition_Flag")]
y_train <- train_df$Attrition_Flag
X_test <- test_df[, -which(names(test_df) %in% "Attrition_Flag")]
y_test <- test_df$Attrition_Flag
# Create a copy of the dataframes
X_test_copy <- X_test
y_test_copy <- y_test
head(X_test)
colnames(train_df)
# Select predictors (X) excluding 'CLIENTNUM' and 'Attrition_Flag'
X <- train_df[, !(names(train_df) %in% c('CLIENTNUM', 'Attrition_Flag'))]
# Select target variable (y)
y <- train_df$Attrition_Flag
# Install and load the necessary package
if (!require(caret)) {
install.packages("caret")
library(caret)
}
# Create a copy of the dataframe
X_1 <- X
# Define the columns to one-hot encode
cols_to_encode <- c('Gender', 'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category')
# Perform one-hot encoding and drop the original columns
for (i in cols_to_encode) {
# Create dummy variables
formula <- paste(i, "~ . - 1")
tempdf <- model.matrix(as.formula(formula), data=X_1)
colnames(tempdf) <- paste(i, colnames(tempdf), sep="_")  # Add prefix to the column names
# Concatenate the dummy variables with the original dataframe
X_1 <- cbind(X_1, tempdf)
# Drop the original column
X_1 <- X_1[, !names(X_1) %in% i]
}
# Print the first few rows of the modified dataframe
head(X_1)
library(psych)
describe(X_1)
# Create a copy of the dataframe
X_2 <- X_1
# Define the numeric columns to be scaled
num_cols <- c('Customer_Age', 'Dependent_count', 'Months_on_book',
'Total_Relationship_Count', 'Months_Inactive_12_mon',
'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal',
'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1')
# Perform feature scaling
X_2[num_cols] <- scale(X_2[num_cols])
# Print the modified dataframe
print(X_2)
library(caret)
library(nnet)
library(rpart)
library(randomForest)
library(gbm)
library(e1071)
library(pROC)
# Load the data
data <- read.csv('credit_card.csv')
# Drop specific columns
data$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 <- NULL
data$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 <- NULL
# Install the package if it's not already installed
if (!require(caTools)) {
install.packages("caTools")
}
# Load the package
library(caTools)
# Now you can use the sample.split function
split <- sample.split(data$Attrition_Flag, SplitRatio = 0.8)
train_df <- subset(data, split == TRUE)
test_df  <- subset(data, split == FALSE)
# Now, you can separate the predictors (X) from the target (y)
X_train <- train_df[, -which(names(train_df) %in% "Attrition_Flag")]
y_train <- train_df$Attrition_Flag
X_test <- test_df[, -which(names(test_df) %in% "Attrition_Flag")]
y_test <- test_df$Attrition_Flag
# Create a copy of the dataframes
X_test_copy <- X_test
y_test_copy <- y_test
head(X_test)
colnames(train_df)
# Select predictors (X) excluding 'CLIENTNUM' and 'Attrition_Flag'
X <- train_df[, !(names(train_df) %in% c('CLIENTNUM', 'Attrition_Flag'))]
# Select target variable (y)
y <- train_df$Attrition_Flag
# Install and load the necessary package
if (!require(caret)) {
install.packages("caret")
library(caret)
}
# Create a copy of the dataframe
X_1 <- X
# Define the columns to one-hot encode
cols_to_encode <- c('Gender', 'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category')
# Perform one-hot encoding and drop the original columns
for (i in cols_to_encode) {
# Create dummy variables
formula <- paste(i, "~ . - 1")
tempdf <- model.matrix(as.formula(formula), data=X_1)
colnames(tempdf) <- paste(i, colnames(tempdf), sep="_")  # Add prefix to the column names
# Concatenate the dummy variables with the original dataframe
X_1 <- cbind(X_1, tempdf)
# Drop the original column
X_1 <- X_1[, !names(X_1) %in% i]
}
# Print the first few rows of the modified dataframe
head(X_1)
library(psych)
describe(X_1)
# Create a copy of the dataframe
X_2 <- X_1
# Define the numeric columns to be scaled
num_cols <- c('Customer_Age', 'Dependent_count', 'Months_on_book',
'Total_Relationship_Count', 'Months_Inactive_12_mon',
'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal',
'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1')
# Perform feature scaling
X_2[num_cols] <- scale(X_2[num_cols])
# Print the modified dataframe
print(X_2)
library(caret)
library(nnet)
library(rpart)
library(randomForest)
library(gbm)
library(e1071)
library(pROC)
# Load the data
data <- read.csv('credit_card.csv')
# Drop specific columns
data$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 <- NULL
data$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 <- NULL
# Install the package if it's not already installed
if (!require(caTools)) {
install.packages("caTools")
}
# Load the package
library(caTools)
# Now you can use the sample.split function
split <- sample.split(data$Attrition_Flag, SplitRatio = 0.8)
train_df <- subset(data, split == TRUE)
test_df  <- subset(data, split == FALSE)
# Now, you can separate the predictors (X) from the target (y)
X_train <- train_df[, -which(names(train_df) %in% "Attrition_Flag")]
y_train <- train_df$Attrition_Flag
X_test <- test_df[, -which(names(test_df) %in% "Attrition_Flag")]
y_test <- test_df$Attrition_Flag
# Create a copy of the dataframes
X_test_copy <- X_test
y_test_copy <- y_test
head(X_test)
colnames(train_df)
# Select predictors (X) excluding 'CLIENTNUM' and 'Attrition_Flag'
X <- train_df[, !(names(train_df) %in% c('CLIENTNUM', 'Attrition_Flag'))]
# Select target variable (y)
y <- train_df$Attrition_Flag
# Install and load the necessary package
if (!require(caret)) {
install.packages("caret")
library(caret)
}
# Create a copy of the dataframe
X_1 <- X
# Define the columns to one-hot encode
cols_to_encode <- c('Gender', 'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category')
# Perform one-hot encoding and drop the original columns
for (i in cols_to_encode) {
# Create dummy variables
formula <- paste(i, "~ . - 1")
tempdf <- model.matrix(as.formula(formula), data=X_1)
colnames(tempdf) <- paste(i, colnames(tempdf), sep="_")  # Add prefix to the column names
# Concatenate the dummy variables with the original dataframe
X_1 <- cbind(X_1, tempdf)
# Drop the original column
X_1 <- X_1[, !names(X_1) %in% i]
}
# Print the first few rows of the modified dataframe
head(X_1)
library(psych)
describe(X_1)
# Create a copy of the dataframe
X_2 <- X_1
# Define the numeric columns to be scaled
num_cols <- c('Customer_Age', 'Dependent_count', 'Months_on_book',
'Total_Relationship_Count', 'Months_Inactive_12_mon',
'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal',
'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1')
# Perform feature scaling
X_2[num_cols] <- scale(X_2[num_cols])
# Print the modified dataframe
print(X_2)
X_2 <- X_1
vif_df <- function(X) {
vif <- data.frame(
Feature = colnames(X),
VIF_Factor = sapply(1:ncol(X), function(i) reticulate::py_run_string(sprintf("from statsmodels.stats.outliers_influence import variance_inflation_factor\nvariance_inflation_factor(X, %s)", i)))
)
return(vif)
}
vif <- vif_df(X_2[, num_cols])
